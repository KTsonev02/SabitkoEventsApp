import { client } from "@/configs/NilePostgresConfig";
import { NextResponse } from "next/server";


export async function POST(request: Request) {
    const { action, postId, content, imageUrl, visibleIn, email } = await request.json();

    await client.connect();

    if (action === "like") {
        const alreadyLiked = await client.query(`
            SELECT * FROM likes
            WHERE post_id = '${postId}' AND user_id = '${email}'
        `);

        if (alreadyLiked.rows.length === 0) {
            await client.query(`
                INSERT INTO likes (post_id, user_id, createdon)
                VALUES ('${postId}', '${email}', CURRENT_TIMESTAMP)
            `);

            await client.query(`
                UPDATE post
                SET likes_count = COALESCE(likes_count, 0) + 1
                WHERE id = '${postId}'
            `);
        } else {
            console.log("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –≤–µ—á–µ –µ –ª–∞–π–∫–Ω–∞–ª —Ç–æ–∑–∏ –ø–æ—Å—Ç");
        }
    } else if (action === "unlike") {
        const alreadyLiked = await client.query(`
            SELECT * FROM likes
            WHERE post_id = '${postId}' AND user_id = '${email}'
        `);

        if (alreadyLiked.rows.length > 0) {
            await client.query(`
                DELETE FROM likes
                WHERE post_id = '${postId}' AND user_id = '${email}'
            `);

            await client.query(`
                UPDATE post
                SET likes_count = GREATEST(COALESCE(likes_count, 0) - 1, 0)
                WHERE id = '${postId}'
            `);
        } else {
            console.log("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –ª–∞–π–∫–Ω–∞–ª —Ç–æ–∑–∏ –ø–æ—Å—Ç, –∑–∞ –¥–∞ –≥–æ –∞–Ω–ª–∞–π–∫–Ω–µ");
        }
    } else if (action === "add_comment") {
        if (!content || !email) {
            return new NextResponse(JSON.stringify({
                error: "–°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –∏ –∏–º–µ–π–ª—ä—Ç —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏"
            }), {
                status: 400,
                headers: { 'Content-Type': 'application/json' }
            });
        }
    
        try {
            await client.query(`
                INSERT INTO comments (post_id, created_on, content, user_id)
                VALUES (${postId}, CURRENT_TIMESTAMP, '${content}', '${email}')
            `);
        
            return new NextResponse(JSON.stringify({
                success: true,
                message: "–ö–æ–º–µ–Ω—Ç–∞—Ä—ä—Ç –µ –¥–æ–±–∞–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            }), {
                status: 200,
                headers: { 'Content-Type': 'application/json' }
            });
        } catch (error) {
            return new NextResponse(JSON.stringify({
                error: "–ì—Ä–µ—à–∫–∞ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏",
            }), {
                status: 500,
                headers: { 'Content-Type': 'application/json' }
            });
        }
    } else {
        // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤ –ø–æ—Å—Ç
        await client.query(`
            INSERT INTO post (id, content, imageurl, createdon, createdby, club)
            VALUES (DEFAULT, '${content}', '${imageUrl}', DEFAULT, '${email}', ${visibleIn});
        `);
    }

    await client.end();
    return new NextResponse('–£—Å–ø–µ—à–Ω–æ', { status: 200 });
}
export async function GET(request: Request) {
    try {
      const url = new URL(request.url);
      const id = url.searchParams.get('id');
      const club = url.searchParams.get('club');
      const orderField = url.searchParams.get('orderField') || 'createdon';
  
      await client.connect();
  
      let query = `
      SELECT post.*, users.name as username, users.image as userprofileimage, users.email as useremail
      FROM post
      INNER JOIN users ON post.createdby = users.email
    `;
    
  
      let conditions: string[] = [];
      if (id) conditions.push(`post.id = ${id}`);
      if (club) conditions.push(`club IN (${club})`);
  
      if (conditions.length > 0) {
        query += ` WHERE ` + conditions.join(' AND ');
      }
  
      query += ` ORDER BY ${orderField} DESC`;
  
      const result = await client.query(query);
  
      // üëá –ö–ª—é—á–æ–≤–∞ –ø—Ä–æ–º—è–Ω–∞: –í–∑–∏–º–∞–º–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—Ç–µ —Å JOIN –∫—ä–º users
      if (id) {
        const commentsQuery = `
          SELECT 
            c.*, 
            u.name as username,
            u.image as userimage
          FROM 
            comments c
          JOIN 
            users u ON c.user_id = u.email  -- –í–∞–∂–Ω–æ: –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ user_id —Å—ä–¥—ä—Ä–∂–∞ email –∏–ª–∏ id!
          WHERE 
            c.post_id = ${id}
          ORDER BY 
            c.created_on DESC
        `;
        const commentsResult = await client.query(commentsQuery);
        result.rows[0].comments = commentsResult.rows;  // –î–æ–±–∞–≤—è–º–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—Ç–µ –∫—ä–º –ø–æ—Å—Ç–∞
      }
  
      await client.end();
      return new NextResponse(JSON.stringify(result.rows), { status: 200 });
  
    } catch (error) {
      console.error('‚ùå GET Error:', error);
      await client.end();
      return new NextResponse('Failed to fetch posts', { status: 500 });
    }
  }

export async function DELETE(request: Request) {
    try {
        const url = new URL(request.url);
        const id = url.searchParams.get('id');

        if (!id) {
            return new NextResponse('Post ID –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω', { status: 400 });
        }

        await client.connect();

        const result = await client.query(`DELETE FROM post WHERE id = ${id};`);

        await client.end();

        if (result.rowCount === 0) {
            return new NextResponse('–ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –ø–æ—Å—Ç —Å —Ç–∞–∫–æ–≤–∞ ID', { status: 404 });
        }

        return new NextResponse('–ü–æ—Å—Ç—ä—Ç –µ —É—Å–ø–µ—à–Ω–æ –∏–∑—Ç—Ä–∏—Ç', { status: 200 });

    } catch (error) {
        console.error('‚ùå DELETE Error:', error);
        await client.end();
        return new NextResponse('–ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–æ—Å—Ç', { status: 500 });
    }
}
